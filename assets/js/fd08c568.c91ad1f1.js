"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[135],{3101:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"peers-sdk/injection6","title":"Remaining Global State Conflicts","description":"Now that EventRegistry solves table event sharing, here are the remaining global state issues that will cause conflicts across packages:","source":"@site/projects/peers-sdk/injection6.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection6","permalink":"/peers-sdk/injection6","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection6.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection6.md"},"sidebar":"tutorialSidebar","previous":{"title":"EventRegistry as Starting Point - Analysis","permalink":"/peers-sdk/injection5"},"next":{"title":"RPC Registry Solution Plan","permalink":"/peers-sdk/injection7"}}');var r=s(4848),i=s(8453);const a={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection6.md"},o="Remaining Global State Conflicts",c={},l=[{value:"1. PersistentVars (Highest Priority)",id:"1-persistentvars-highest-priority",level:2},{value:"2. RPC Call Objects (Medium Priority)",id:"2-rpc-call-objects-medium-priority",level:2},{value:"3. Memoized Functions (Medium Priority)",id:"3-memoized-functions-medium-priority",level:2},{value:"4. Window/Global Assignments (Lower Priority)",id:"4-windowglobal-assignments-lower-priority",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"remaining-global-state-conflicts",children:"Remaining Global State Conflicts"})}),"\n",(0,r.jsx)(t.p,{children:"Now that EventRegistry solves table event sharing, here are the remaining global state issues that will cause conflicts across packages:"}),"\n",(0,r.jsx)(t.h2,{id:"1-persistentvars-highest-priority",children:"1. PersistentVars (Highest Priority)"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Problem:"})," Module-level instantiations create separate instances per peers-sdk package."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Each peers-sdk instance creates its own observables\nexport const myUserId = persistentVar('myUserId', { defaultValue: '' });\nexport const thisDeviceId = persistentVar('thisDeviceId', { defaultValue: '' });\nexport const activeGroupId = persistentVar('activeGroupId', { defaultValue: '' });\nexport const packagesRootDir = persistentVar('packagesRootDir', { defaultValue: '~/peers-packages' });\nexport const trustedServers = persistentVar('trustedServers', { defaultValue: [...] });\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Impact:"})," peers-electron and peers-device get different observables for the same persistent data. Changes in one package don't propagate to the other."]}),"\n",(0,r.jsx)(t.h2,{id:"2-rpc-call-objects-medium-priority",children:"2. RPC Call Objects (Medium Priority)"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Problem:"})," Global objects that get mutated when handlers are registered."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"export const rpcServerCalls = { ... };\nexport const rpcClientCalls = { ... };\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Impact:"})," Multiple packages may overwrite each other's RPC handlers."]}),"\n",(0,r.jsx)(t.h2,{id:"3-memoized-functions-medium-priority",children:"3. Memoized Functions (Medium Priority)"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Problem:"})," Per-instance memoization doesn't share across packages."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"export const waitForTableFactory = memoizePromise(async () => new Promise<TableFactory>(...));\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Impact:"})," Different packages wait for different TableFactory instances instead of sharing one."]}),"\n",(0,r.jsx)(t.h2,{id:"4-windowglobal-assignments-lower-priority",children:"4. Window/Global Assignments (Lower Priority)"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Problem:"})," Multiple instances overwrite global assignments."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// In rpc-types.ts\n_window['rpc'] = rpcServerCalls;\n\n// In table.ts  \nwindow[`PeersDB_${metaData.name}`] = this;\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Impact:"})," Last package loaded wins, breaking debugging/development tools."]}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"PersistentVars"})," is the biggest issue - it's fundamental to application state management. Without sharing these, packages can't coordinate on basic things like ",(0,r.jsx)(t.code,{children:"myUserId"})," or ",(0,r.jsx)(t.code,{children:"activeGroupId"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"RPC handlers"})," are second priority - conflicts here could break communication between client/server components."]}),"\n",(0,r.jsx)(t.p,{children:"The others are lower impact but should eventually be addressed for a clean implementation."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);