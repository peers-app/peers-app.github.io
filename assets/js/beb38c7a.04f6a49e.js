"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[254],{4287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"peers-sdk/injection7","title":"RPC Registry Solution Plan","description":"Current Problem","source":"@site/projects/peers-sdk/injection7.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection7","permalink":"/peers-sdk/injection7","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection7.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection7.md"},"sidebar":"tutorialSidebar","previous":{"title":"Remaining Global State Conflicts","permalink":"/peers-sdk/injection6"},"next":{"title":"RPC Registry - Backward Compatibility Challenge","permalink":"/peers-sdk/injection8"}}');var s=n(4848),i=n(8453);const a={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection7.md"},l="RPC Registry Solution Plan",c={},o=[{value:"Current Problem",id:"current-problem",level:2},{value:"Solution: RPC Registry Pattern",id:"solution-rpc-registry-pattern",level:2},{value:"1. Create RPCRegistry Class",id:"1-create-rpcregistry-class",level:3},{value:"2. Update TableFactory Integration",id:"2-update-tablefactory-integration",level:3},{value:"3. Create RPC Accessor Functions",id:"3-create-rpc-accessor-functions",level:3},{value:"4. Maintain Backward Compatibility",id:"4-maintain-backward-compatibility",level:3},{value:"Implementation Steps",id:"implementation-steps",level:2},{value:"Benefits",id:"benefits",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"rpc-registry-solution-plan",children:"RPC Registry Solution Plan"})}),"\n",(0,s.jsx)(t.h2,{id:"current-problem",children:"Current Problem"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"rpcServerCalls"})," and ",(0,s.jsx)(t.code,{children:"rpcClientCalls"})," are global objects that get mutated when handlers are registered:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export const rpcServerCalls = {\n  ping: async (msg: string) => `pong: ${msg}`,\n  tableGet: rpcStub('tableGet') as (tableName: string, id: string) => Promise<any>,\n  // ... other handlers\n};\n\nexport const rpcClientCalls = {\n  ping: async (msg: string) => `pong: ${msg}`, \n  emitEvent: rpcStub('emitEvent') as ((event: IEventData) => Promise<boolean>),\n  // ... other handlers\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Issue:"})," Multiple peers-sdk instances overwrite each other's RPC handlers."]}),"\n",(0,s.jsx)(t.h2,{id:"solution-rpc-registry-pattern",children:"Solution: RPC Registry Pattern"}),"\n",(0,s.jsx)(t.p,{children:"Follow the same pattern as EventRegistry - create a registry that manages shared RPC handlers."}),"\n",(0,s.jsx)(t.h3,{id:"1-create-rpcregistry-class",children:"1. Create RPCRegistry Class"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// src/rpc/rpc-registry.ts\nexport class RPCRegistry {\n  private serverCalls = new Map<string, Function>();\n  private clientCalls = new Map<string, Function>();\n  \n  setServerCall(name: string, handler: Function): void\n  getServerCall(name: string): Function\n  setClientCall(name: string, handler: Function): void  \n  getClientCall(name: string): Function\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"2-update-tablefactory-integration",children:"2. Update TableFactory Integration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export class TableFactory {\n  private readonly eventRegistry = new EventRegistry();\n  private readonly rpcRegistry = new RPCRegistry();\n  \n  constructor(dataSourceFactory: DataSourceFactory) {}\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"3-create-rpc-accessor-functions",children:"3. Create RPC Accessor Functions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Replace global objects with functions that use shared registry\nexport function getRPCServerCalls(registry?: RPCRegistry) {\n  const rpc = registry || getGlobalRPCRegistry();\n  return createRPCServerProxy(rpc);\n}\n\nexport function getRPCClientCalls(registry?: RPCRegistry) {\n  const rpc = registry || getGlobalRPCRegistry();  \n  return createRPCClientProxy(rpc);\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"4-maintain-backward-compatibility",children:"4. Maintain Backward Compatibility"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Keep existing exports working\nexport const rpcServerCalls = getRPCServerCalls();\nexport const rpcClientCalls = getRPCClientCalls();\n"})}),"\n",(0,s.jsx)(t.h2,{id:"implementation-steps",children:"Implementation Steps"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Create RPCRegistry class with handler management"}),"\n",(0,s.jsx)(t.li,{children:"Add RPCRegistry to TableFactory (piggyback on existing DI)"}),"\n",(0,s.jsx)(t.li,{children:"Create proxy objects that delegate to shared registry"}),"\n",(0,s.jsx)(t.li,{children:"Update existing global exports to use shared registry"}),"\n",(0,s.jsx)(t.li,{children:"Test cross-package RPC handler sharing"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"RPC handlers shared across package instances"}),"\n",(0,s.jsx)(t.li,{children:"Zero breaking changes to existing code"}),"\n",(0,s.jsx)(t.li,{children:"Follows established EventRegistry pattern"}),"\n",(0,s.jsx)(t.li,{children:"Leverages existing TableFactory sharing mechanism"}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);