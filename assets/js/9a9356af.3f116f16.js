"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[457],{2214:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"peers-sdk/injection3","title":"Cross-Package Container Sharing Question","description":"Question","source":"@site/projects/peers-sdk/injection3.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection3","permalink":"/peers-sdk/injection3","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection3.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection3.md"},"sidebar":"tutorialSidebar","previous":{"title":"Maintaining Ergonomics with DI","permalink":"/peers-sdk/injection2"},"next":{"title":"DI Integration for events.ts (Table Events)","permalink":"/peers-sdk/injection4"}}');var i=s(4848),r=s(8453);const a={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection3.md"},c="Cross-Package Container Sharing Question",o={},l=[{value:"Question",id:"question",level:2},{value:"Answer",id:"answer",level:2},{value:"Architecture",id:"architecture",level:3},{value:"Setup in peers-electron/main.ts",id:"setup-in-peers-electronmaints",level:3},{value:"In peers-device/init.ts",id:"in-peers-deviceinitts",level:3},{value:"Result",id:"result",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Pattern for All Packages",id:"pattern-for-all-packages",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cross-package-container-sharing-question",children:"Cross-Package Container Sharing Question"})}),"\n",(0,i.jsx)(n.h2,{id:"question",children:"Question"}),"\n",(0,i.jsxs)(n.p,{children:["So if we have a project like peers-electron which relies on peers-sdk and also peers-device (which itself relies on peers-sdk) then we can have main.ts in peers-electron call ",(0,i.jsx)(n.code,{children:"setGlobalContainer(container)"})," and also call ",(0,i.jsx)(n.code,{children:"init(container)"})," peers-device (same container) and even though they are using different instances of peers-sdk, because the container is the same all the code should work?"]}),"\n",(0,i.jsx)(n.h2,{id:"answer",children:"Answer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Yes, exactly!"})," This is the key benefit of the ambient DI approach - it solves the multi-instance problem while maintaining ergonomics."]}),"\n",(0,i.jsx)(n.p,{children:"Here's how it works:"}),"\n",(0,i.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"peers-electron\n\u251c\u2500\u2500 peers-sdk (instance A)\n\u2514\u2500\u2500 peers-device\n    \u2514\u2500\u2500 peers-sdk (instance B)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setup-in-peers-electronmaints",children:"Setup in peers-electron/main.ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { setGlobalContainer, createContainer } from "peers-sdk";\nimport * as peersDevice from "peers-device";\n\n// Create shared container with real data source\nconst container = createContainer(new SqliteDataSource(\'./app.db\'));\n\n// Set global container for peers-electron\'s peers-sdk instance\nsetGlobalContainer(container);\n\n// Initialize peers-device with same container\npeersDevice.init(container);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"in-peers-deviceinitts",children:"In peers-device/init.ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { setGlobalContainer } from "peers-sdk";\n\nexport function init(container: DIContainer) {\n  // Set the same container for peers-device\'s peers-sdk instance\n  setGlobalContainer(container);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Both peers-sdk instances use the ",(0,i.jsx)(n.strong,{children:"same container instance"})]}),"\n",(0,i.jsx)(n.li,{children:"Same TableFactory, same data source, same table instances"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Users()"})," in peers-electron and ",(0,i.jsx)(n.code,{children:"Users()"})," in peers-device return identical table instances"]}),"\n",(0,i.jsx)(n.li,{children:"Data is perfectly synchronized because it's literally the same objects"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shared state"}),": Both packages access the same table instances"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single data source"}),": No conflicts or synchronization issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean APIs"}),": All existing code continues to work unchanged"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Explicit control"}),": The top-level app controls the dependency graph"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testability"}),": Easy to inject mock containers for testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pattern-for-all-packages",children:"Pattern for All Packages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// peers-ui/init.ts\nexport function init(container?: DIContainer) {\n  if (container) setGlobalContainer(container);\n}\n\n// peers-react-native/init.ts  \nexport function init(container?: DIContainer) {\n  if (container) setGlobalContainer(container);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'This approach transforms the current "fight over globals" problem into "share the same dependency graph" - which is exactly what we want for a cohesive application architecture.'})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);