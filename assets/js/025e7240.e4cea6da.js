"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[244],{2227:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"peers-sdk/injection5","title":"EventRegistry as Starting Point - Analysis","description":"Your Proposed Approach","source":"@site/projects/peers-sdk/injection5.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection5","permalink":"/peers-sdk/injection5","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection5.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection5.md"},"sidebar":"tutorialSidebar","previous":{"title":"DI Integration for events.ts (Table Events)","permalink":"/peers-sdk/injection4"},"next":{"title":"Remaining Global State Conflicts","permalink":"/peers-sdk/injection6"}}');var i=s(4848),r=s(8453);const l={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection5.md"},o="EventRegistry as Starting Point - Analysis",a={},c=[{value:"Your Proposed Approach",id:"your-proposed-approach",level:2},{value:"My Assessment: <strong>This is a smart approach</strong>",id:"my-assessment-this-is-a-smart-approach",level:2},{value:"Why This Works Well",id:"why-this-works-well",level:3},{value:"Potential Concerns",id:"potential-concerns",level:3},{value:"My Honest Take on Ambient DI Strategy",id:"my-honest-take-on-ambient-di-strategy",level:2},{value:"Recommendation",id:"recommendation",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"eventregistry-as-starting-point---analysis",children:"EventRegistry as Starting Point - Analysis"})}),"\n",(0,i.jsx)(n.h2,{id:"your-proposed-approach",children:"Your Proposed Approach"}),"\n",(0,i.jsx)(n.p,{children:"Start with just the EventRegistry implementation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create EventRegistry class to encapsulate event emitter state"}),"\n",(0,i.jsx)(n.li,{children:"Instantiate it in TableFactory"}),"\n",(0,i.jsx)(n.li,{children:"Update Table constructor to accept optional EventRegistry"}),"\n",(0,i.jsx)(n.li,{children:"Skip the full DI container for now"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"my-assessment-this-is-a-smart-approach",children:["My Assessment: ",(0,i.jsx)(n.strong,{children:"This is a smart approach"})]}),"\n",(0,i.jsx)(n.h3,{id:"why-this-works-well",children:"Why This Works Well"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Immediate Value"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Solves the cross-package event isolation problem right away"}),"\n",(0,i.jsx)(n.li,{children:"Much simpler to implement and test than full DI"}),"\n",(0,i.jsx)(n.li,{children:"Low risk since it's mostly additive changes"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Natural Progression"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"EventRegistry becomes a concrete example of the shared state problem"}),"\n",(0,i.jsx)(n.li,{children:"When you hit the next similar issue, the DI pattern will feel more necessary"}),"\n",(0,i.jsx)(n.li,{children:"You'll have real experience with what needs to be shared"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Minimal Disruption"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Table constructor gets one optional parameter"}),"\n",(0,i.jsx)(n.li,{children:"TableFactory gets one new property"}),"\n",(0,i.jsx)(n.li,{children:"Zero breaking changes to existing code"}),"\n",(0,i.jsx)(n.li,{children:"Events.ts stays untouched"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"potential-concerns",children:"Potential Concerns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Global State Still Exists"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["TableFactory still has global ",(0,i.jsx)(n.code,{children:"_tableFactory"})," singleton"]}),"\n",(0,i.jsx)(n.li,{children:"Multiple peers-sdk instances will still fight over this"}),"\n",(0,i.jsx)(n.li,{children:"EventRegistry helps but doesn't solve the root cause"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Partial Solution"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PersistentVars still have the same multi-instance problem"}),"\n",(0,i.jsx)(n.li,{children:"Other shared state issues will require similar ad-hoc solutions"}),"\n",(0,i.jsx)(n.li,{children:"Might end up with many registries instead of one coherent system"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"my-honest-take-on-ambient-di-strategy",children:"My Honest Take on Ambient DI Strategy"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Maintains excellent developer ergonomics"}),"\n",(0,i.jsx)(n.li,{children:"Zero breaking changes"}),"\n",(0,i.jsx)(n.li,{children:"Gradual adoption path"}),"\n",(0,i.jsx)(n.li,{children:"Works with existing global patterns"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Still relies on global state (just better organized)"}),"\n",(0,i.jsx)(n.li,{children:"Multiple solution approaches instead of one coherent system"}),"\n",(0,i.jsx)(n.li,{children:"Each new shared state problem requires custom registry solution"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"recommendation",children:"Recommendation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Start with EventRegistry approach"})," - it's pragmatic and low-risk. You'll quickly see if the cross-package sharing problem is solved and can evaluate whether the full DI investment is worth it."]}),"\n",(0,i.jsx)(n.p,{children:"If EventRegistry works well and you encounter 2-3 more similar issues, that's when I'd revisit the full ambient DI approach. But starting simple and concrete is often better than over-engineering upfront."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);