"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[498],{1686:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"peers-sdk/claude2","title":"claude2","description":"look at claude.md and injection.md for context","source":"@site/projects/peers-sdk/claude2.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/claude2","permalink":"/peers-sdk/claude2","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/claude2.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/claude2.md"},"sidebar":"tutorialSidebar","previous":{"title":"claude","permalink":"/peers-sdk/claude"},"next":{"title":"Peers Device Architecture","permalink":"/peers-sdk/devices"}}');var r=s(4848),o=s(8453);const i={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/claude2.md"},c=void 0,a={},d=[];function p(e){const t={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"look at claude.md and injection.md for context"}),"\n",(0,r.jsx)(t.p,{children:"Currently consumers of the peers-sdk use persistentVars like so:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import { myUserId, Users } from "peers-sdk";\n\nfunction getMyUserObject() {\n  const user = Users().get(myUserId());\n  return user;\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Note that this makes it very easy to start using peers-sdk."}),"\n",(0,r.jsx)(t.p,{children:"By switching to DI I think we'd have to rewrite the code to something like this"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import { myUserId, Users } from "peers-sdk";\n\nfunction getMyUserObject(di: DIContainer) {\n  const UsersInstance = di.get(Users);\n  const myUserIdInstance = di.get(myUserId);\n  const user = UsersInstance().get(myUserIdInstance());\n  return user;\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Note that this new form is significantly harder to use.  Also the names being imported from ",(0,r.jsx)(t.code,{children:"peers-sdk"})," don't make much sense so we'd probably want to change those too.  That will be a significant rewrite effort.  But what I like the least is how much harder it is for users of the package to start using it.  Is there a way we can allow users to set the DIContainer once and still write the code the original way?  Similar to how the ",(0,r.jsx)(t.code,{children:"setTableFactory"})," works but for the entire library?"]}),"\n",(0,r.jsx)(t.p,{children:"Write your response to injection2.md.  Keep it simple and concise."})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var n=s(6540);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);