"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[942],{2535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"peers-sdk/injection4","title":"DI Integration for events.ts (Table Events)","description":"Current Implementation","source":"@site/projects/peers-sdk/injection4.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection4","permalink":"/peers-sdk/injection4","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection4.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection4.md"},"sidebar":"tutorialSidebar","previous":{"title":"Cross-Package Container Sharing Question","permalink":"/peers-sdk/injection3"},"next":{"title":"EventRegistry as Starting Point - Analysis","permalink":"/peers-sdk/injection5"}}');var s=n(4848),r=n(8453);const i={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection4.md"},c="DI Integration for events.ts (Table Events)",o={},l=[{value:"Current Implementation",id:"current-implementation",level:2},{value:"The Problem",id:"the-problem",level:2},{value:"Minimal DI Solution",id:"minimal-di-solution",level:2},{value:"1. Event Registry in Container",id:"1-event-registry-in-container",level:3},{value:"2. Update Table Constructor (Minimal Change)",id:"2-update-table-constructor-minimal-change",level:3},{value:"3. Update TableFactory",id:"3-update-tablefactory",level:3},{value:"4. Register in Container",id:"4-register-in-container",level:3},{value:"Result",id:"result",level:2},{value:"Usage (Unchanged)",id:"usage-unchanged",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"di-integration-for-eventsts-table-events",children:"DI Integration for events.ts (Table Events)"})}),"\n",(0,s.jsx)(t.h2,{id:"current-implementation",children:"Current Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["Tables use ",(0,s.jsx)(t.code,{children:"Emitter"})," and ",(0,s.jsx)(t.code,{children:"Event"})," from events.ts to notify subscribers of data changes:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// In table.ts\nthis.dataChangedEmitter = new Emitter(this.tableName + "_DataChanged");\nthis.dataChanged = this.dataChangedEmitter.event;\n\n// Usage\nMessages().dataChanged.subscribe(event => { ... });\n'})}),"\n",(0,s.jsx)(t.h2,{id:"the-problem",children:"The Problem"}),"\n",(0,s.jsxs)(t.p,{children:["Each peers-sdk instance creates its own event emitters. When peers-electron and peers-device both create ",(0,s.jsx)(t.code,{children:"Messages()"})," tables, they get different ",(0,s.jsx)(t.code,{children:"dataChanged"})," events even if using the same underlying data."]}),"\n",(0,s.jsx)(t.h2,{id:"minimal-di-solution",children:"Minimal DI Solution"}),"\n",(0,s.jsx)(t.h3,{id:"1-event-registry-in-container",children:"1. Event Registry in Container"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// src/di/event-registry.ts\nexport class EventRegistry {\n  private emitters = new Map<string, Emitter<any>>();\n  \n  getEmitter<T>(eventName: string): Emitter<T> {\n    if (!this.emitters.has(eventName)) {\n      this.emitters.set(eventName, new Emitter<T>(eventName));\n    }\n    return this.emitters.get(eventName)!;\n  }\n}\n\n// src/di/tokens.ts\nexport const TOKENS = {\n  // ... existing\n  EventRegistry: Symbol('EventRegistry'),\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"2-update-table-constructor-minimal-change",children:"2. Update Table Constructor (Minimal Change)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// src/data/orm/table.ts\nexport class Table<T extends { [key: string]: any }> {\n  constructor(\n    public readonly metaData: ITableMetaData,\n    schema: z.AnyZodObject | undefined,\n    public readonly dataSource: IDataSource<T>,\n    private eventRegistry?: EventRegistry  // Optional parameter\n  ) {\n    // ... existing code\n\n    if (this.eventRegistry) {\n      // Get shared emitter from registry\n      this.dataChangedEmitter = this.eventRegistry.getEmitter(this.tableName + "_DataChanged");\n    } else {\n      // Fallback to current behavior\n      this.dataChangedEmitter = new Emitter(this.tableName + "_DataChanged");\n    }\n    this.dataChanged = this.dataChangedEmitter.event;\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"3-update-tablefactory",children:"3. Update TableFactory"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// src/data/orm/table-factory.ts\n@Injectable(TOKENS.DataSourceFactory, TOKENS.EventRegistry)\nexport class TableFactory {\n  constructor(\n    private dataSourceFactory: DataSourceFactory,\n    private eventRegistry: EventRegistry\n  ) {}\n\n  public getTable<T>(...): Table<T> {\n    // ... existing logic\n    table = new TableClass(metaData, schema, dataSource, this.eventRegistry);\n  }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"4-register-in-container",children:"4. Register in Container"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// src/di/setup.ts\nexport function createContainer(dataSourceFactory?: DataSourceFactory): DIContainer {\n  const container = new DIContainer();\n  \n  container.register(TOKENS.EventRegistry, () => new EventRegistry());\n  container.register(TOKENS.DataSourceFactory, dataSourceFactory || defaultDataSourceFactory);\n  container.register(TOKENS.TableFactory, TableFactory);\n  \n  return container;\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"result",children:"Result"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Multiple peers-sdk instances using the same container share the same event emitters"}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Messages().dataChanged"})," in peers-electron and peers-device subscribe to the same event"]}),"\n",(0,s.jsx)(t.li,{children:"Zero breaking changes to existing subscriber code"}),"\n",(0,s.jsx)(t.li,{children:"Events.ts core classes remain unchanged"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"usage-unchanged",children:"Usage (Unchanged)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// This continues to work exactly the same\nMessages().dataChanged.subscribe(event => {\n  console.log('Message changed:', event.dataObject);\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"The shared EventRegistry ensures all table instances with the same name use the same emitter, solving the cross-package event isolation problem."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);