"use strict";(self.webpackChunkpeers_app_docs_hub=self.webpackChunkpeers_app_docs_hub||[]).push([[137],{473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"peers-sdk/injection2","title":"Maintaining Ergonomics with DI","description":"The Problem","source":"@site/projects/peers-sdk/injection2.md","sourceDirName":"peers-sdk","slug":"/peers-sdk/injection2","permalink":"/peers-sdk/injection2","draft":false,"unlisted":false,"editUrl":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection2.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/peers-app/peers-sdk/edit/main/docs/injection2.md"},"sidebar":"tutorialSidebar","previous":{"title":"Simple Isomorphic DI System for peers-sdk","permalink":"/peers-sdk/injection"},"next":{"title":"Cross-Package Container Sharing Question","permalink":"/peers-sdk/injection3"}}');var s=t(4848),r=t(8453);const a={custom_edit_url:"https://github.com/peers-app/peers-sdk/edit/main/docs/injection2.md"},o="Maintaining Ergonomics with DI",l={},c=[{value:"The Problem",id:"the-problem",level:2},{value:"Solution: Ambient DI with Global Fallback",id:"solution-ambient-di-with-global-fallback",level:2},{value:"Updated Implementation Pattern",id:"updated-implementation-pattern",level:2},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Simple Usage (unchanged)",id:"simple-usage-unchanged",level:3},{value:"Advanced Usage (explicit DI)",id:"advanced-usage-explicit-di",level:3},{value:"Package-level Configuration",id:"package-level-configuration",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Migration Strategy",id:"migration-strategy",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"maintaining-ergonomics-with-di",children:"Maintaining Ergonomics with DI"})}),"\n",(0,s.jsx)(n.h2,{id:"the-problem",children:"The Problem"}),"\n",(0,s.jsxs)(n.p,{children:["You're absolutely right - explicit DI container passing destroys the developer experience that makes peers-sdk easy to use. The original ",(0,s.jsx)(n.code,{children:"Users().get(myUserId())"})," is clean and intuitive."]}),"\n",(0,s.jsx)(n.h2,{id:"solution-ambient-di-with-global-fallback",children:"Solution: Ambient DI with Global Fallback"}),"\n",(0,s.jsx)(n.p,{children:"Keep the original API intact while enabling DI injection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/di/ambient.ts\nlet _globalContainer: DIContainer | undefined;\n\nexport function setGlobalContainer(container: DIContainer): void {\n  _globalContainer = container;\n}\n\nexport function getGlobalContainer(): DIContainer {\n  if (!_globalContainer) {\n    // Auto-create default container for zero-config usage\n    _globalContainer = createDefaultClientContainer();\n  }\n  return _globalContainer;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"updated-implementation-pattern",children:"Updated Implementation Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/data/users.ts (updated)\nexport function Users(container?: DIContainer): UsersTable {\n  const di = container || getGlobalContainer();\n  return di.resolve<TableFactory>(TOKENS.TableFactory)\n    .getTable<IUser>(metaData, schema) as UsersTable;\n}\n\n// src/data/persistent-vars.ts (updated)  \nexport function persistentVar<T>(name: string, opts?: PersistentVarOptions, container?: DIContainer): PersistentVar<T> {\n  const di = container || getGlobalContainer();\n  // ... existing logic using di instead of global getTableFactory()\n}\n\nexport const myUserId = persistentVar('myUserId', { defaultValue: '' });\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"simple-usage-unchanged",children:"Simple Usage (unchanged)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { myUserId, Users } from "peers-sdk";\n\nfunction getMyUserObject() {\n  const user = Users().get(myUserId());\n  return user;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-usage-explicit-di",children:"Advanced Usage (explicit DI)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { myUserId, Users, createContainer } from "peers-sdk";\n\nconst customContainer = createContainer(customDataSourceFactory);\n\nfunction getMyUserObject() {\n  const user = Users(customContainer).get(myUserId());\n  return user;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"package-level-configuration",children:"Package-level Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// In peers-ui main setup\nimport { setGlobalContainer, createDefaultClientContainer } from "peers-sdk";\n\nconst container = createDefaultClientContainer();\nsetGlobalContainer(container);\n\n// Now all peers-ui code uses the same container instance\n// while still maintaining the simple API\n'})}),"\n",(0,s.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero breaking changes"}),": Existing code continues to work unchanged"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simple onboarding"}),": New users can start immediately without DI knowledge"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DI when needed"}),": Advanced users can inject custom containers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared state"}),": Multiple packages can share the same container instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testability"}),": Tests can inject mock containers easily"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add ambient DI infrastructure"}),"\n",(0,s.jsx)(n.li,{children:"Update table/persistentVar functions to accept optional container"}),"\n",(0,s.jsx)(n.li,{children:"Keep all existing exports and signatures"}),"\n",(0,s.jsxs)(n.li,{children:["Consuming packages can opt into shared containers via ",(0,s.jsx)(n.code,{children:"setGlobalContainer()"})]}),"\n",(0,s.jsx)(n.li,{children:"No API changes required for end users"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach gives you the isolation benefits of DI while preserving the ergonomics that make peers-sdk approachable."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);